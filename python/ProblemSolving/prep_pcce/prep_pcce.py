# -----------------------------------------------------------------------------------------
# 1. 문자 출력
# 분석: 문자 출력, 개행 특수문자
# -----------------------------------------------------------------------------------------
message = "Let's go!"

# 단순하게 개행 문자를 사이사이 추가하였음.
print("3\n2\n1")
print(message)

# -----------------------------------------------------------------------------------------
# 2. 각도 합치기
# 분석: 나머지 연산 활용, if, else 삼항 연산
# -----------------------------------------------------------------------------------------
angle1 = int(input())
angle2 = int(input())

# 입력받은 정수형의 두 값의 합이 360도보다 크면 360으로 나머지 연산 수행
# 360보다 작거나 같으면 두 값의 합을 그대로 출력
sum_angle = (angle1 + angle2) % 360 if angle1 + angle2 > 360 else angle1 + angle2

# 아래와 같이 간단하게도 구현 가능, 360도면 0, 280도 이면 280 반환
# sum_angle = (angle1 + angle2) % 360

print(sum_angle)

# -----------------------------------------------------------------------------------------
# 3. 수 나누기
# 분석: 나눗셈, 나머지 연산 활용한 수 자리수 나누기
# -----------------------------------------------------------------------------------------
number = int(input())

answer = 0

# 기존 코드의 이슈는 for i in range(1): 루프는 한번만 실행되므로 두자리씩 자르는 작업이 한번만 수행된다는 점.
# 예: 666666
# 1. number: 666666 > 0 
# >> answer에 66 추가 >> number: 6666 
# 2. number: 6666 > 0
# >> answer에 66 추가 >> number: 66
# 3. number: 66 > 0
# >> answer에 66 추가 >> number: 0
# 4. Loop 종료
while number > 0:
    answer += number % 100
    number //= 100

print(answer)

# -----------------------------------------------------------------------------------------
# 4. 병과 분류
# 분석: 문자열 slicing, if, elif, else
# -----------------------------------------------------------------------------------------
code = input()

# code[-4:]는 문자열 code의 마지막 4글자를 가져오는 슬라이싱(slicing) 표현
# -4:는 문자열의 끝에서 4번째 문자부터 마지막 문자까지를 선택
last_four_words = code[-4:]

# if, elif, else 문 익숙도 확인 문제
if last_four_words == "_eye":
    print("Ophthalmologyc")
elif last_four_words == "head":
    print("Neurosurgery")
elif last_four_words == "infl":
    print("Orthopedics")
elif last_four_words == "skin":
    print("Dermatology")
else:
    print("direct recommendation")

# -----------------------------------------------------------------------------------------
# 5. 심폐소생술
# 분석: 반복 for문 사용법, 배열 길이 len 함수, 배열 자체 사용법
# -----------------------------------------------------------------------------------------
def solution(cpr):
    answer = []
    # 기본 순서
    basic_order = ["check", "call", "pressure", "respiration", "repeat"]
    for action in cpr:
        for i in range(len(basic_order)):
            if action == basic_order[i]:
                answer.append(i+1)
    # answer 예: [1,4,5,2,3] 
    return answer

# -----------------------------------------------------------------------------------------
# 6. 물부족
# 분석: 입출력 예 분석, 퍼센티지 계산, for i in range(len(arr)):, if A > B: 구문
# -----------------------------------------------------------------------------------------
# 문제
'''
ㅇㅇ시에서는 저수지가 하나 있는데, 도시 내에서 사용하는 모든 물은 이 저수지에 저장된 물을 끌어와 사용합니다. 
이상 기후로 인해 극심한 가뭄이 예고된 상황에서, 지난 달의 물 사용량과 이번달부터 일정 기간 동안의 월별 물 사용량의 변화를 예측한 값을 이용해 
몇 달 뒤 물이 부족해지는지 예측하려고 합니다.
이번달부터의 월별 물 사용량 변화를 예측한 값은 다음과 같이 리스트에 담겨 주어집니다.

[10, -10, 10, -10, 10, -10, 10, -10, 10, -10]
리스트의 각 원소는 해당 월의 물 사용량이 전 달에 비해 몇 % 만큼 증가 또는 감소하는지를 나타냅니다.
예를 들어, 이번달의 물 사용량 (리스트의 첫 번째 원소)은 지난 달 보다 10% 증가한 값이며, 
다음 달(리스트의 두 번째 원소)의 물 사용량은 이번달 사용량에서 10%만큼 감소한 값입니다.
자세한 값은 입출력 예시를 참고해 주세요.
현재 저수지에 저장된 물의 양을 나타내는 정수 storage와 지난 달 물 사용량을 나타내는 정수 usage, 
월별 물 사용량이 전 달 대비 어떻게 변하는지 저장된 정수 리스트 change가 주어질 때 
몇 달 뒤 물이 부족해지는지 return 하도록 solution 함수를 작성하려 합니다. 
코드가 올바르게 작동하도록 한 줄을 수정해 solution 함수를 완성해 주세요. 
가뭄이 끝날때 까지 저수지의 물이 남아 있다면 -1을 return합니다.

[ 제한사항 ]
1,000 ≤ storage ≤ 1,000,000
500 ≤ usage ≤ 30,000
1 ≤ change의 길이 ≤ 30
-99 ≤ change[i] ≤ 500

change[i] 가 양수일 경우 물 사용량은 전 달 보다 change[i]% 만큼 증가합니다.
change[i] 가 음수일 경우 물 사용량은 전 달 보다 change[i]% 만큼 감소합니다.
change[i] 가 0일 경우 물 사용량은 전 달과 동일합니다.
매달 물 사용량은 소수점 이하를 버린 정수로 계산합니다.

[ 입출력 예 ]
storage	usage	change	result
5141	500	[10, -10, 10, -10, 10, -10, 10, -10, 10, -10]	-1
1000	2000	[-10, 25, -33]	1

입출력 예 설명
입출력 예 #1

매월 물 사용량은 다음과 같습니다.
n개월 뒤	0 (이번 달)	1 (다음 달)	2	3	4	5	6	7	8	9
월 별 물 사용량	550	495	544	490	539	485	533	479	526	474
총 물 사용량	550	1045	1589	2079	2618	3103	3636	4115	4641	5115
예를 들어, 지난 달 물 사용량 usage = 500이므로, 이번달 물 사용량은 10% 증가한 550입니다. 
다음 달 물 사용량은 이번달 사용량 550에서 10% 감소한 495 이며, 나머지 달도 동일하게 계산합니다. 
9달 뒤까지 계산한 물 사용량은 총 5115 이며, 현재 저수지에 저장된 물의 양은 storage = 5141입니다. 
따라서 물이 부족해지지 않으므로 -1을 return합니다.

입출력 예 #2
총 사용가능한 물의 양이 1000인데 2000 * 0.9 = 1800이 필요하므로 이번 달부터 물이 부족합니다. 따라서 0을 return합니다.
'''
def solution(storage, usage, change):
    total_usage = 0
    for i in range(len(change)):
        # usage = usage * (100 + change[i])/100 다른 사람 풀이
        usage += usage * change[i]/100  # 나의 풀이
        total_usage += usage
        if total_usage > storage:
            return i
    
    return -1